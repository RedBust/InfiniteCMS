<?php

/**
 * Event
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    InfiniteCMS
 * @subpackage Models
 * @author     Vendethiel <vendethiel@hotmail.fr>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Event extends BaseEvent
{
	protected static $registeredEvents = array();
	protected $datePassed = null;

	public function canJoin()
	{
		if ($this->isFull() || $this->relatedExists('Winner'))
			return false;
		return !$this->isElapsed();
	}
	public function isFull()
	{
		 if ($this->capacity == -1)
			return false;
		return $this->Participants->count() == $this->capacity;
	}
	public function isElapsed()
	{
		return $this->isPeriodPassed();
	}
	public function isWinnable()
	{
		if (!$this->Participants->count())
			return false;
		if ($this->is_tombola)
			return true;
		return $this->isElapsed();
	}
	public function refreshPeriodPassed()
	{
		$this->datePassed = null;
	}
	public function isPeriodPassed()
	{
		if (null === $this->datePassed)
		{
			list($date, $time) = explode(' ', $this->period);
			list($y, $mo, $d) = explode('-', $date);
			list($h, $mi, $s) = explode(':', $time);

			$this->datePassed = date_passed(mktime($h, $mi, $s, $mo, $d, $y));
		}
		return $this->datePassed;
	}
	public function isFinished()
	{
		if ($this->isFull() || $this->relatedExists('Winner'))
			return true;
		return $this->isPeriodPassed();
	}
	public function getYear()
	{
		return substr($this->period, 0, 4);
	}
	public function getMonth()
	{
		return substr($this->period, 5, 2);
	}
	public function getDay()
	{
		return substr($this->period, 8, 2);
	}
	public function getHour()
	{
		return substr($this->period, 11, 2);
	}
	public function getMinute()
	{
		return substr($this->period, 14, 2);
	}

	public function getURL()
	{
		return array('controller' => 'Event', 'action' => 'index', 'year' => substr($this->period, 0, 4), 'month' => substr($this->period, 5, 2));
	}
	public function getParticipateURL($can)
	{
		return to_url(array('controller' => 'EventParticipant', 'action' => $can ? 'join' : 'part', 'id' => $this->id));
	}
	public function getGuildLink()
	{
		if (!$this->relatedExists('Guild'))
			return '';
		return make_link($this->Guild, '[G]');
	}
	public function getLink()
	{
		return $this->getGuildLink() . make_link($this->getURL(), $this->name);
	}

	public function __toString()
	{
		return $this->toString();
	}
	public function toString($forceCannot = false)
	{
		$this->getTable()->sendEventBoxes();
		global $account;

		$canParticipate = $forceCannot ? false : level(LEVEL_LOGGED) && $this->canJoin() ? $account->canParticipate($this) : false;

		if ($this->Participants->count())
			$participants = $this->getParticipantsString();
		else
			$participants = $this->isFinished() ? '' : lang('participants.any');

		if (!in_array($this->id, self::$registeredEvents))
		{
			self::$registeredEvents[] = $this->id;

			echo tag('div', array('id' => 'event-' . $this->id, 'class' => 'showThis'),
			 $this->getParticipateLink($canParticipate) . $this->getInfoString() . $participants);
			jQ('registerEvent(' . $this->id . ')');
		}

		return $this->toListItem($canParticipate, $forceCannot);
	}
	public function toListItem($can, $forceCannot = false)
	{
		global $account;

		return tag('b', $this->getHour() . 'h' . $this->getMinute() . $this->getGuildLink() . ': ') . $this->name .
		 ( js_link('showEvent(' . $this->id . ')', make_img('icons/group', EXT_PNG, lang('participants')), '#', array('class' => 'showThis'))) .
		 ( level(LEVEL_LOGGED) && $account->getMainChar() && !$forceCannot ? make_link($this->getParticipateURL($can), 
		   make_img('icons/group_' . ($can ? 'add' : 'delete'), EXT_PNG, lang('event.join')),
		   null, array('class' => 'hideThis')) : '');
	}
	public function getParticipantsString()
	{
		$participants = array();
		foreach ($this->Participants as $character)
			$participants[] = $character->toEventParticipant($this->getWinnerId());
		return tag('h3', lang('participant' . ( count($participants) > 1 ? 's' : '' )) .
		 ( $this->capacity == -1 || $this->capacity == 1 ? '' : ' (' . count($participants) . '/' . $this->capacity . ')' ) .
		 ' : ') . $this->getWinnerString() . implode(', ', $participants);
	}
	public function getWinnerString()
	{
		global $account;
		$winnerId = $this->getWinnerId();
		if ($winnerId === -1 && !$this->isElapsed() && !$this->relatedExists('Winner') && level(LEVEL_LOGGED) && $account->canSetWinner($this))
			return $this->getWinnerPrompt();
		else
			return '';
	}
	public function getWinnerPrompt() //getwinner form ? but that wouldn't be correct with tombola :(
	{
		if ($this->is_tombola)
		{
			if ($this->capacity == -1)
				return make_link(array('controller' => 'Event', 'action' => 'win', 'id' => $this->id), lang('event.pick_winner')) . tag('br'); //@todo "pick a winner"
			else
				return '';
		}
		else
		{
			if ($this->Participants->count() == 0)
				return '';

				jQ('
var form_char = $("#form_char").autocomplete(
{
	source: ' . json_encode($this->Participants->toValueArray('name')) . ',
	select: function (event, ui)
	{
		form_char.val(ui.item.value);
		this.form.submit();
	}
});');
			return make_form(array(array('char', lang('winner'))), array('controller' => 'Event', 'action' => 'win', 'id' => $this->id), array('submit_hideThis' => true));
		}
	}
	public function getWinnerId($default = -1)
	{
		return $this->relatedExists('Winner') ? $this->Winner->guid : $default;
	}
	public function getParticipateLink($can)
	{
		if (!level(LEVEL_LOGGED))
			return '';

		if ($this->isFinished())
			return '';
		return make_img('icons/group_' . ($can ? 'add' : 'delete'), EXT_PNG) .
		 tag('b', make_link($this->getParticipateURL($can), lang('event.' . ($can ? 'join' . ($this->Participants->count() ? '' : '_first') : 'part')), array(), array(), false)) . tag('br');
	}
	public function getInfoString()
	{
		$info = '';
		if ($this->relatedExists('Reward'))
			$info .= tag('br') . tag('fieldset', tag('legend', tag('b', lang('reward'))) . $this->Reward) . tag('br');
		if ($this->isFinished())
			$info .= tag('i', lang('event.elapsed')) . tag('br');
		return $info;
	}

	public function setWinner(Character $winner)
	{
		if ($this->relatedExists('Reward'))
			$this->Reward->giveTo($winner);

		$this->Winner = $winner;
	}
	public function doTombola()
	{
		$winner = $this->Participants[rand(0, $this->Participants->count()-1)];
		$this->setWinner($winner);
	}
}
