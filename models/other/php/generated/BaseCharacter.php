<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Character', 'other');

/**
 * BaseCharacter
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $guid
 * @property string $name
 * @property integer $sexe
 * @property integer $class
 * @property integer $color1
 * @property integer $color2
 * @property integer $color3
 * @property integer $kamas
 * @property integer $spellboost
 * @property integer $capital
 * @property integer $energy
 * @property integer $level
 * @property integer $xp
 * @property integer $size
 * @property integer $gfx
 * @property integer $alignement
 * @property integer $honor
 * @property integer $deshonor
 * @property integer $alvl
 * @property integer $account
 * @property integer $vitalite
 * @property integer $force
 * @property integer $sagesse
 * @property integer $intelligence
 * @property integer $chance
 * @property integer $agilite
 * @property integer $seespell
 * @property integer $seefriend
 * @property string $canaux
 * @property integer $map
 * @property integer $cell
 * @property integer $pdvper
 * @property string $spells
 * @property string $objets
 * @property string $savepos
 * @property string $zaaps
 * @property string $jobs
 * @property integer $mountxpgive
 * @property integer $mount
 * @property Account $Account
 * @property GuildMember $GuildMember
 * @property Doctrine_Collection $LiveActions
 * @property Mount $Mount
 * @property Doctrine_Collection $Events
 * @property Doctrine_Collection $ContestParticipations
 * 
 * @package    InfiniteCMS
 * @subpackage Models
 * @author     Vendethiel <vendethiel@hotmail.fr>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCharacter extends Record
{
    public function setTableDefinition()
    {
        $this->setTableName('personnages');
        $this->hasColumn('guid', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'length' => '4',
             ));
        $this->hasColumn('name', 'string', 30, array(
             'type' => 'string',
             'length' => '30',
             ));
        $this->hasColumn('sexe', 'integer', 1, array(
             'type' => 'integer',
             'length' => '1',
             ));
        $this->hasColumn('class', 'integer', 2, array(
             'type' => 'integer',
             'length' => '2',
             ));
        $this->hasColumn('color1', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('color2', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('color3', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('kamas', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('spellboost', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('capital', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('energy', 'integer', 4, array(
             'type' => 'integer',
             'default' => '10000',
             'length' => '4',
             ));
        $this->hasColumn('level', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('xp', 'integer', 8, array(
             'type' => 'integer',
             'default' => '0',
             'length' => '8',
             ));
        $this->hasColumn('size', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('gfx', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('alignement', 'integer', 4, array(
             'type' => 'integer',
             'default' => '0',
             'length' => '4',
             ));
        $this->hasColumn('honor', 'integer', 4, array(
             'type' => 'integer',
             'default' => '0',
             'length' => '4',
             ));
        $this->hasColumn('deshonor', 'integer', 4, array(
             'type' => 'integer',
             'default' => '0',
             'length' => '4',
             ));
        $this->hasColumn('alvl', 'integer', 4, array(
             'type' => 'integer',
             'default' => '1',
             'length' => '4',
             ));
        $this->hasColumn('account', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('vitalite', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('force', 'integer', 4, array(
             'type' => 'integer',
             'default' => '0',
             'length' => '4',
             ));
        $this->hasColumn('sagesse', 'integer', 4, array(
             'type' => 'integer',
             'default' => '0',
             'length' => '4',
             ));
        $this->hasColumn('intelligence', 'integer', 4, array(
             'type' => 'integer',
             'default' => '0',
             'length' => '4',
             ));
        $this->hasColumn('chance', 'integer', 4, array(
             'type' => 'integer',
             'default' => '0',
             'length' => '4',
             ));
        $this->hasColumn('agilite', 'integer', 4, array(
             'type' => 'integer',
             'default' => '0',
             'length' => '4',
             ));
        $this->hasColumn('seespell', 'integer', 1, array(
             'type' => 'integer',
             'default' => '0',
             'length' => '1',
             ));
        $this->hasColumn('seefriend', 'integer', 1, array(
             'type' => 'integer',
             'default' => '1',
             'length' => '1',
             ));
        $this->hasColumn('canaux', 'string', 15, array(
             'type' => 'string',
             'default' => '*#%!pi$:?',
             'length' => '15',
             ));
        $this->hasColumn('map', 'integer', 4, array(
             'type' => 'integer',
             'default' => '8479',
             'length' => '4',
             ));
        $this->hasColumn('cell', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('pdvper', 'integer', 4, array(
             'type' => 'integer',
             'default' => '100',
             'length' => '4',
             ));
        $this->hasColumn('spells', 'string', null, array(
             'type' => 'string',
             'length' => '',
             ));
        $this->hasColumn('objets', 'string', null, array(
             'type' => 'string',
             'length' => '',
             ));
        $this->hasColumn('savepos', 'string', 20, array(
             'type' => 'string',
             'default' => '10298,314',
             'length' => '20',
             ));
        $this->hasColumn('zaaps', 'string', 250, array(
             'type' => 'string',
             'default' => '',
             'length' => '250',
             ));
        $this->hasColumn('jobs', 'string', null, array(
             'type' => 'string',
             'length' => '',
             ));
        $this->hasColumn('mountxpgive', 'integer', 4, array(
             'type' => 'integer',
             'default' => '0',
             'length' => '4',
             ));
        $this->hasColumn('mount', 'integer', 4, array(
             'type' => 'integer',
             'default' => '-1',
             'length' => '4',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Account', array(
             'local' => 'account',
             'foreign' => 'guid'));

        $this->hasOne('GuildMember', array(
             'local' => 'guid',
             'foreign' => 'guid'));

        $this->hasMany('LiveAction as LiveActions', array(
             'local' => 'guid',
             'foreign' => 'playerid'));

        $this->hasOne('Mount', array(
             'local' => 'mount',
             'foreign' => 'id'));

        $this->hasMany('Event as Events', array(
             'refClass' => 'EventParticipant',
             'local' => 'character_id',
             'foreign' => 'event_id'));

        $this->hasMany('ContestParticipant as ContestParticipations', array(
             'local' => 'guid',
             'foreign' => 'character_id'));
    }
}