<?php

/**
 * EventTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EventTable extends RecordTable
{
	protected $_eventBoxes = null;

    /**
     * Returns an instance of this class.
     *
     * @return object EventTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Event');
    }

	public function findByYearAndMonth($year, $month)
	{
		return $this->createQuery('e')
					->where('YEAR(e.period) = ? AND MONTH(e.period) = ?', array($year, $month))
						->leftJoin('e.Participants p')
					->execute();
	}


	protected function _sendEventBoxes()
	{
		if (null !== $this->_eventBoxes)
			return;

		global $account;
		$this->_eventBoxes = array();

		echo tag('div', array('style' => array('display' => 'none'), 'id' => 'eventParticipants', 'title' => lang('participants')), ''),
		 tag('div', array('id' => 'selectChar', 'style' => array('display' => 'none'), 'title' => pluralize(ucfirst(lang('character')), count($account->Characters))), $account->getCharactersList(true));
		jQ('
var eventParticipants = $("#eventParticipants").dialog(dialogOpt),
	events = [],
	event_selected = null,

	selectChar = $("#selectChar").dialog(dialogOpt).accordion({clearStyle: true, collapsible: true, active: false});
function showEvent(id)
{
	event_selected = id;
	eventParticipants.dialog("open").find(".event").hide();
	eventParticipants.find("#event-" + id).show();
}
function registerEvent(id)
{
	events[id] = $("#event-" + id).addClass("event").appendTo(eventParticipants);
}
function choosePerso(perso)
{
	if (event_selected)
		document.location = "' . to_url(array(
			'controller' => 'EventParticipant',
			'action' => 'join',
			'id' => '%%event_selected%%',
			'char' => ''
		)) . '" + perso;
	else
		alert("You need to choose an event first.");
}
bind(function ()
{
	eventParticipants.dialog("close");
	selectChar.dialog("close");
	delete eventParticipants;
	delete events;
	delete selectChar;
	delete chars;
})');
	}

	public function sort($events)
	{
		global $account;
		$this->_sendEventBoxes();

		$days = array();
		foreach ($events as $event)
		{
			$day = substr($event['period'], 8, 2);
			if (!isset($days[$day]))
				$days[$day] = array();

			$canParticipate = level(LEVEL_LOGGED) ? $account->canParticipate($event['id']) : false;
			$participate_url = to_url(array('controller' => 'EventParticipant', 'action' => $canParticipate ? 'join' : 'part', 'id' => $event['id']));
			$days[$day][] = tag('b', str_replace(':', 'h', substr($event['period'], 11, 5)) . ': ') . $event['name'] .
			 ($event->isElapsed() && !$event->Participants->count() ? '' : js_link('showEvent(' . $event['id'] . ')', make_img('icons/group', EXT_PNG, lang('participants')), '#', array('class' => 'showThis'))) .
			 (level(LEVEL_LOGGED) && !$event->isElapsed() ? make_link($participate_url, 
			   make_img('icons/group_' . ($canParticipate ? 'add' : 'delete'), EXT_PNG, lang('participant.join')),
			   null, array('class' => 'hideThis')) : '');

			
			if ($event->Participants->count())
			{
				$participants = array();
				foreach ($event->Participants as $character)
				{
						$participants[] = tag('span', array('class' => $character->isMine() ? 'myChar' : 'aChar'),
						 $character->getInfoLink());
				}
				$participants = implode(', ', $participants);
			}
			else
				$participants = $event->isElapsed() ? '' : lang('participants.any');

			if ($event->isElapsed())
				$participate_link = tag('i', lang('event.elapsed')) . tag('br');
			else
			{
				if (level(LEVEL_LOGGED))
				{
					$participate_link = make_img('icons/group_' . ($canParticipate ? 'add' : 'delete'), EXT_PNG) .
					 tag('b', call_user_func($canParticipate ? 'js_link' : 'make_link', $canParticipate ? 'selectChar.dialog("open")' : $participate_url, lang('event.' . ($canParticipate ? 'join' . ($event->Participants->count() ? '' : '_first') : 'part')), array(), array(), false)) . tag('br');
				}
				else
					$participate_link = '';
			}
			echo tag('div', array('id' => 'event-' . $event['id'], 'class' => 'showThis'), $participate_link . $participants);
			jQ('registerEvent(' . $event['id'] . ')');
		}
		return $days;
	}
	public function display($events, $day)
	{
		if (isset($events[$day]))
		{	
			return tag('div', array('align' => 'center'), tag('b', tag('u', $day))) . tag('br') .
			 implode(tag('br'), $events[$day]);
		}
		return tag('b', $day);
	}
}